package main

import (
	"fmt"
	"math"
	"sort"
)

/**
*
* 【16. 最接近的三数之和】
🌀https://leetcode.cn/problems/3sum-closest/description/
*
* @author  sun
* @date 2022/11/4 10:02
*/

// 三层嵌套递归，超时……
func threeSumClosestA(nums []int, target int) int {
	diff, n := make(map[int]bool), len(nums)
	for i := 0; i < n; i++ {
		if i > 0 && nums[i] == nums[i-1] {
			continue
		}
		for j := i + 1; j < n; j++ {
			for k := j + 1; k < n; k++ {
				curSum := nums[i] + nums[j] + nums[k]
				if !diff[curSum] {
					diff[curSum] = true
				}
			}
		}
	}
	min, ans := math.MaxInt, 0
	for k := range diff {
		if int(math.Abs(float64(k-target))) < min {
			ans = k
			min = int(math.Abs(float64(k - target)))
		}

	}
	return ans
}

func threeSumClosestB(nums []int, target int) int {
	sort.Ints(nums)
	n, best := len(nums), math.MaxInt

	// 根据差值的绝对值来更新答案
	update := func(cur int) {
		if abs(cur-target) < abs(best-target) {
			best = cur
		}
	}

	for i := 0; i < n; i++ {
		if i > 0 && nums[i] == nums[i-1] {
			continue
		}
		l, r := i+1, n-1
		for l < r {
			sum := nums[i] + nums[l] + nums[r]
			if sum == target {
				return sum
			}
			update(sum)
			if sum > target {
				for l < r && nums[r] == nums[r-1] {
					r--
				}
				r--
			} else {
				for l < r && nums[l] == nums[l+1] {
					l++
				}
				l++
			}
		}
	}
	return best
}

func abs(x int) int {
	if x < 0 {
		return -1 * x
	}
	return x
}

func main() {
	fmt.Println(
		threeSumClosestA([]int{-1, 2, 1, -4}, 1), // 2 (-1 + 2 + 1 = 2)
		threeSumClosestA([]int{0, 0, 0}, 1),      // 0
	)

	fmt.Println(
		threeSumClosestB([]int{-1, 2, 1, -4}, 1), // 2 (-1 + 2 + 1 = 2)
		threeSumClosestB([]int{0, 0, 0}, 1),      // 0
		threeSumClosestB([]int{-546, 529, -214, 910, -595, 613, -312, 20, -937, 540, 725, 188, 349, 830, 389, -148, -142, 54, 283, 163, -816, 810, 380, 689, 743, 552, -555, 444, -75, 675, -170, -887, -946, 257, -241, -36, -506, -625, -737, -931, -646, 599, -405, 107, -976, -274, -497, -983, -609, -936, 158, -94, 784, 532, -958, 457, -233, 489, 251, -975, 329, -41, -480, -336, -240, -105, -338, 379, -886, 598, 790, 211, 425, 126, 838, 796, -517, 230, 728, 588, -921, -65, -950, 334, 730, 553, -850, -191, -765, 737, -985, -771, -878, 285, -572, 350, -316, -795, 792, 843, 197, -773, 555, -801, 292, 744, 323, -322, -764, -619, 688, -627, 355, -452, -449, -953, -744, -481, -514, 202, -732, 330, -423, 88, 531, 232, -141, 475, -26, -535, -155, -709, 965, 997, 113, -490, -832, 297, 403, -487, 873, -806, -638, -760, -99, -796, -441, 417, -263, -114, -849, 358, 198, -283, 572, -601, -402, -38, -317, 942, -384, 354, -510, -949, 673, 461, 772, -242, -9, -116, -183, -73, -203, 848, -46, -376, 418, -345, 719, 892, 977, 681, -231, -295, -747, 168, 472, 73, 463, 729, 83, -294, -133, -699, 630, 777, -368, 169, -770, -823, -348, 447, 352, 376, -230, -971, -18, 597, -780, 905, 295, 206, 862, 52, 660, 66, 23, -821, 979, 526, -118, -411, -168, 954, -691, -334, -783, -7, 29, -842, 901, -869, 336, -640, -580, 203, -310, 633, 291, -212, -228, 678, 968, 317, 79, 28, 175, -519, 657, -813, 563, -209, -614, 791, -358, 89, -226, -217, -485, 885, 396, -71, -520, -965, -129, -875, -56, 60, -889, 386, -629, -781, 421, -67, -756, -45, -220, -981, 316, 686, -934, -498, -291, -238, 961, -947, -297, -945, -845, 416, -927, -855, -919, 213, -602, -684, -403, -89, -270, -424, 281, -969, -204, -649, -598, -592, 411, 869, -753, -634, 394, -298, 787, 412, -12, 166, -584, 441, 458, 280, 51, -1, -824, -789, 695},
			-574), // -574
	)
}
